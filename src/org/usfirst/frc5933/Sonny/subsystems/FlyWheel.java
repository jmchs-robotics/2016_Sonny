// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.Sonny.subsystems;

import org.usfirst.frc5933.Sonny.RobotMap;
import org.usfirst.frc5933.Sonny.commands.*;
import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *This subsystem needs to be able to:
 *1. Turn on
 *2. Take a speed to maintain
 *3. Set Talon speed control to maintain that speed.
 *4. Turn off
 */
public class FlyWheel extends Subsystem {

    private double pVBus = 0;
    private double speed = 0;
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon flyWheelMotor = RobotMap.flyWheelFlyWheelMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void setpVBus(double s) {
        flyWheelMotor.set(s);
        pVBus = s;
        System.out.println("pVBus: " + s);
    }
    
    public void goVBus() {
        flyWheelMotor.set(pVBus);
        System.out.println("Given pVBus: " + pVBus);
        System.out.println("Encoder Out: " + flyWheelMotor.getSpeed());
    }
    
    public void turnOff(){
        flyWheelMotor.set(0);
        System.out.println("Motor Off");
    }
 
    public void goSlower() {
        pVBus -= .01;
        if (pVBus < 0)
            pVBus = 0;
        System.out.println("pVBus: " + pVBus);
    }

    public void goFaster() {
        pVBus += .01;
        if (pVBus > 1)
            pVBus = 1;
        System.out.println("pVBus: " + pVBus);
    }
    
    public void setVBusMode() {
        flyWheelMotor.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
    }
    
    public void setSpeed(double s){
        flyWheelMotor.set(s);
        speed = s;
        System.out.println("RPMs: " + s);
    }
    
    public void rpmUp() {
        speed += 5;
        //if(speed > 500)
        //    speed = 500;
        System.out.println("RPMs: " + speed);
    }
    
    public void rpmDown() {
        speed -= 5;
        //if (speed > 0)
        //    speed = 0;
        System.out.println("RPMs: " + speed);
    }
    
    public void goSpeed(){
        flyWheelMotor.set(speed);
        System.out.println("Given Speed: " + speed);
        System.out.println("Encoder Out: " + flyWheelMotor.getSpeed());
    }
    
    public void setSpeedMode() {
        flyWheelMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
        flyWheelMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
        flyWheelMotor.configEncoderCodesPerRev(40); //20 per channel, two channels, 20*2 = 40
                                                    //Pulses Per Revolution: 20/channel
        flyWheelMotor.setInverted(true);
    }
}

