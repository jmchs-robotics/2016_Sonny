// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.Sonny;

import org.usfirst.frc5933.Sonny.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc5933.Sonny.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

	public JoystickButton XButton;
	public JoystickButton YButton;
	public JoystickButton AButton;
	public JoystickButton BButton;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick xbox;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xbox = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("RunSpindleMotor", new RunSpindleMotor());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("ArcadeDrive", new ArcadeDrive());
        SmartDashboard.putData("BackFlapOpen", new BackFlapOpen());
        SmartDashboard.putData("FrontFlapOpen", new FrontFlapOpen());
        SmartDashboard.putData("FeedBalls", new FeedBalls());
        SmartDashboard.putData("FireBalls", new FireBalls());
        SmartDashboard.putData("RunBeaterBar", new RunBeaterBar());
        SmartDashboard.putData("RunElevator", new RunElevator());
        SmartDashboard.putData("RunClawServo", new RunClawServo());
        SmartDashboard.putData("GearPosition1", new GearPosition1());
        SmartDashboard.putData("GearPosition2", new GearPosition2());
        SmartDashboard.putData("GearPosition3", new GearPosition3());
        SmartDashboard.putData("BackFlapClose", new BackFlapClose());
        SmartDashboard.putData("FrontFlapClose", new FrontFlapClose());
        SmartDashboard.putData("DriveStraight", new DriveStraight());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        JoystickButton XButton = new JoystickButton(xbox, 3);
        JoystickButton YButton = new JoystickButton(xbox, 4);
        JoystickButton AButton = new JoystickButton(xbox, 1);
        JoystickButton BButton = new JoystickButton(xbox, 2);

//    	XButton.whenPressed(new BackFlapOpen());
//    	YButton.whenPressed(new FrontFlapOpen());
//    	AButton.whenPressed(new BackFlapClose());
//    	BButton.whenPressed(new FrontFlapClose());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getXbox() {
        return xbox;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

