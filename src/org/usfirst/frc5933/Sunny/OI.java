// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5933.Sunny;

import org.usfirst.frc5933.Sunny.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import src.org.usfirst.frc5933.ubot.Joystick;
import src.org.usfirst.frc5933.ubot.JoystickButton;
import src.org.usfirst.frc5933.ubot.LiftingArmDown;
import src.org.usfirst.frc5933.ubot.LiftingArmMove;
import src.org.usfirst.frc5933.ubot.LiftingArmUp;
import src.org.usfirst.frc5933.ubot.NullCommand;
import src.org.usfirst.frc5933.ubot.ReverseControls;
import src.org.usfirst.frc5933.ubot.ToggleTurbo;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick1;
    public JoystickButton trigger1;
    public JoystickButton button2;
    public JoystickButton button3;
    public JoystickButton button4;
    public JoystickButton button5;
    public JoystickButton button6;
    public JoystickButton button7;
    public JoystickButton button8;
    public JoystickButton button9;
    public JoystickButton button10;
    public JoystickButton button11;
    public JoystickButton button12;
    public JoystickButton knob;
    public JoystickButton hatSwitch;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);

        trigger1 = new JoystickButton(joystick1, 1);
        trigger1.whenPressed(new NullCommand());
        button2 = new JoystickButton(joystick1, 2);
        button2.whileHeld(new NullCommand());
        button3 = new JoystickButton(joystick, 3);
        button3.whenPressed(new NullCommand());
        button4 = new JoystickButton(joystick1, 4);
        button4.whileHeld(new NullCommand());
        button5 = new JoystickButton(joystick1, 5);
        button5.whileHeld(new NullCommand());
        button6 = new JoystickButton(joystick1, 6);
        button6.whenPressed(new NullCommand());
        button7 = new JoystickButton(joystick1, 7);
        button7.whenPressed(new NullCommand());
        button8 = new JoystickButton(joystick1, 8);
        button8.whenPressed(new NullCommand());
        button9 = new JoystickButton(joystick1, 9);
        button9.whilePressed(new NullCommand());
        button10 = new JoystickButton(joystick1, 10);
        button10.whilePressed(new NullCommand());
        button11 = new JoystickButton(joystick1, 11);
        button11.whilePressed(new NullCommand());
        button12 = new JoystickButton(joystick1, 12);
        button12.whilePressed(new NullCommand());
        xBoxJoystick = new Joystick(0);

        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }
    public JoystickButton getTrigger1() {
        return trigger1;
    }

    public JoystickButton getButton2() {
        return button2;
    }

    public JoystickButton getButton3() {
        return button3;
    }

    public JoystickButton getButton4() {
        return button4;
    }
    public JoystickButton getButton5() {
        return button5;
    }
    public JoystickButton getButton6() {
        return button6;
    }
    public JoystickButton getButton7() {
        return button7;
    }
    public JoystickButton getButton8() {
        return button8;
    }
    public JoystickButton getButton9() {
        return button9;
    }
    public JoystickButton getButton10() {
        return button10;
    }
    public JoystickButton getButton11() {
        return button11;
    }
    public JoystickButton getButton12() {
        return button12;
    }

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

